# This file should contain everything to configure the workflow on a global scale.
# In case of sample based data, it should be complemented by a samples.tsv file that contains
# one row per sample. It can be parsed easily via pandas.
#samples: "config/samples_medium.tsv"

# minimal sets of samples for testing:

#samples: "config/samples_small.tsv"
samples: "config/samples_mini.tsv"
#samples: "config/samples_micro.tsv"

resources:
  # input of first run for mapping reads of each sample
#  fastq-data: "data/medium_dataset/ddRAGEdataset_ATCACG_1.fastq"

# minimal dataset for testing:
#  fastq-data: "data/small_dataset/ddRAGEdataset_GGCTAC_1.fastq"
  fastq-data: "data/mini_dataset/ddRAGEdataset_GGCTAC_1.fastq"
#  fastq-data: "data/micro_dataset/ddRAGEdataset_ATCACG_1.fastq"


  # input of second run to compare the samples with each other
  fasta-data: "results/test.fasta"

mutationrates:
  total: 0.05
  substitution: 0.8999
  insertion: 0.05
  deletion: 0.05

ilp:
  # choose a solver and its parameters for the identification of potential representatives (optimization by ILP with PuLP)
  # for the different solvers and their options please see https://coin-or.github.io/pulp/technical/solvers.html
  # if no solver is selected, then PuLP automatically uses default included solver (CBC and CHOCO)
  # as solver can be selected: CHOCO_CMD, COINMP_DLL, CPLEX_DLL, GLPK_CMD, LpSolver, IPCL_CMD, MOSEK, PULP_CHOCO_CMD, PYGLPK YAPOSIB,
  #                            LpSolver_CMD, SCIP_CMD, COIN_CMD, CPLEX_PY, GUROBI, XPRESS, GUROBI_CMD, PULP_CBC_CMD, CPLEX_CMD
  solver: "COIN_CMD"
  mip: False           # boolean value; can be specified for each solver
  timeLimit: 120       # maximum time for solver in seconds, can be specified for each solver, except SCIP_CMD
  threads: 12          # total number of threads to use for ILP calculation, only for GUROBI_CMD, PULP_CBC_CMD, COIN_CMD or CPLEX_CMD solver
  gapRel:              # float value, only for CPLEX_PY, GUROBI, XPRESS, GUROBI_CMD, PULP_CBC_CMD, COIN_CMD or CPLEX_CMD solver
  gapAbs:              # float value, only for GUROBI_CMD, PULP_CBC_CMD, COIN_CMD or CPLEX_CMD solver
  maxNodes:            # integer value, only for CPLEX_CMD solver
  maxMemory:           # float value, only for CPLEX_CMD solver

# optional graph figure outputs and additional xml files for subgraphs
graph-intermediate-steps:
  edit-distance-graph:
    # on activation please set a path to the variable graph_figure (rule noderad_graph in noderad.smk),
    # on inactivation comment this variable out
    activate: True
  connected-components:
    graph:
      # on activation please set a path to the variable connected_components_xml (rule noderad_representatives in noderad.smk),
      # on inactivation comment this variable out
      activate-xml: True
      # on activation please set a path to the variable connected_components_figure (rule noderad_representatives in noderad.smk),
      # on inactivation comment this variable out
      activate-figure: True
    subgraphes:
      # on activation please set a directory to the variable components_subgraphes (rule noderad_representatives in noderad.smk),
      # on inactivation comment this variable out
      activate: True
  ilp-optimized-graph:
    # on activation please set a path to the variable repesentatives_figure (rule noderad_representatives in noderad.smk),
    # on inactivation comment this variable out
    activate: True
  optimized-representantives-graph:
    # on activation please set a path to the variable opt_repres_xml (rule optimized_solution in noderad.smk),
    # on inactivation comment this variable out
    activate-xml: True
    # on activation please set a path to the variable opt_repres_figure (rule optimized_solution in noderad.smk),
    # on inactivation comment this variable out
    activate-figure: True
    # on activation please set a directory to the variable dir_clusters (rule optimized_solution in noderad.smk),
    # on inactivation comment this variable out
    cluster:
      activate: True

params: # ToDo: adjust optional parameters for the rule cutadapt_se
  # these cutadapt parameters need to contain the required flag(s) for
  # the type of adapter(s) to trim, i.e.:
  # * https://cutadapt.readthedocs.io/en/stable/guide.html#adapter-types
  #   * `-a` for 3' adapter in the forward reads
  #   * `-g` for 5' adapter in the forward reads
  #   * `-b` for adapters anywhere in the forward reads
  # also, separate capitalised letter flags are required for adapters in
  # the reverse reads of paired end sequencing:
  # * https://cutadapt.readthedocs.io/en/stable/guide.html#trimming-paired-end-reads
  cutadapt-se: "-g AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT"
   # reasoning behind parameters:
  #   * `-e 0.005`: the default cutadapt maximum error rate of `0.2` is far too high, for Illumina
  #     data the error rate is more in the range of `0.005` and setting it accordingly should avoid
  #     false positive adapter matches
  #   * `--minimum-overlap 7`: the cutadapt default minimum overlap of `5` did trimming on the level
  #     of expected adapter matches by chance
  cutadapt-pe: "-a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -g AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -G AATGATACGGCGACCACCGAGATCTACACTCTTTCCCTACACGACGCTCTTCCGATCT"
  cutadapt-others: "-e 0.005 --overlap 7"
